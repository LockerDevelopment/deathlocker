"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Lock, Key, Users, Clock } from "lucide-react";
import Cookies from "js-cookie";

type UnlockType = "time" | "vote";

export default function CreateSafePage() {
  const [file, setFile] = useState<File | null>(null);
  const [encryptionKey, setEncryptionKey] = useState("");
  const [cid, setCID] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [unlockType, setUnlockType] = useState<UnlockType>("time");
  const [inactiveDays, setInactiveDays] = useState(0);
  const [inactiveHours, setInactiveHours] = useState(0);
  const [inactiveMinutes, setInactiveMinutes] = useState(0);
  const [voters, setVoters] = useState<string>("");

  const handleSubmit = async () => {
    if (!file || !encryptionKey) return alert("–§–∞–π–ª —ñ –∫–ª—é—á –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ");
    setLoading(true);
    console.log("–¢–∏–ø —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è:", unlockType);
    if (unlockType === "time") {
      console.log(
        `–†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∑–∞ —á–∞—Å–æ–º: ${inactiveDays} –¥–Ω—ñ–≤, ${inactiveHours} –≥–æ–¥–∏–Ω, ${inactiveMinutes} —Ö–≤–∏–ª–∏–Ω`
      );
    } else if (unlockType === "vote") {
      console.log("–ì–∞–º–∞–Ω—Ü—ñ –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:", voters);
    }
    try {
      setTimeout(() => {
        const mockCID = "bafy...mockedcid";
        setCID(mockCID);

        const newSafe = {
          cid: mockCID,
          encryptionKey,
          unlockType,
          timestamp: Date.now(),
          fileName: file.name,
          inactiveDays,
          inactiveHours,
          inactiveMinutes,
          voters: voters.trim().split("\n"),
        };

        const existingSafes = Cookies.get("deathlocker-safes");
        const safes = existingSafes ? JSON.parse(existingSafes) : [];
        safes.push(newSafe);
        Cookies.set("deathlocker-safes", JSON.stringify(safes), { expires: 365 });

        setLoading(false);
      }, 1500);
    } catch (err) {
      alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ: " + (err as Error).message);
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-zinc-900 to-blue-900 p-6">
      <div className="bg-zinc-800 text-white rounded-2xl shadow-2xl p-8 max-w-md w-full relative border border-zinc-700">
        <div className="absolute -top-6 left-1/2 -translate-x-1/2 bg-zinc-900 rounded-full p-3 border-4 border-zinc-700">
          <Lock className="w-8 h-8 text-blue-400" />
        </div>

        <h1 className="text-2xl font-bold text-center mt-6 mb-8 text-blue-300">–¶–∏—Ñ—Ä–æ–≤–∏–π –°–µ–π—Ñ</h1>

        <label className="block text-sm text-zinc-400 mb-1">–§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è</label>
        <input
          type="file"
          onChange={(e) => setFile(e.target.files?.[0] || null)}
          className="w-full text-sm file:rounded-md file:border-0 file:bg-blue-600 file:text-white file:px-4 file:py-2 mb-4 bg-zinc-700 text-zinc-200"
        />

        <label className="block text-sm text-zinc-400 mb-1">–ö–ª—é—á —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è</label>
        <div className="relative mb-4">
          <Key className="absolute left-3 top-1/2 -translate-y-1/2 text-zinc-400 w-5 h-5" />
          <input
            type="password"
            placeholder="–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –∫–ª—é—á"
            value={encryptionKey}
            onChange={(e) => setEncryptionKey(e.target.value)}
            className="w-full pl-10 pr-4 py-2 rounded-md bg-zinc-700 text-white border border-zinc-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <label className="block text-sm text-zinc-400 mb-1">–¢–∏–ø —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è</label>
        <select
          value={unlockType}
          onChange={(e) => setUnlockType(e.target.value as UnlockType)}
          className="w-full py-2 px-3 rounded-md bg-zinc-700 text-white border border-zinc-600 focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4"
        >
          <option value="time">–ó–∞ —á–∞—Å–æ–º –ø—ñ—Å–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ</option>
          <option value="vote">–ó–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è–º</option>
        </select>

        {unlockType === "time" && (
          <div className="mb-4">
            <label className="block text-sm text-zinc-400 mb-1">–ß–∞—Å –¥–æ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:</label>
            <div className="flex space-x-2">
              <div>
                <label className="block text-xs text-zinc-500 mb-0.5">–î–Ω—ñ–≤</label>
                <input
                  type="number"
                  value={inactiveDays}
                  onChange={(e) => setInactiveDays(parseInt(e.target.value))}
                  className="w-16 py-2 px-3 rounded-md bg-zinc-700 text-white border border-zinc-600 focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                />
              </div>
              <div>
                <label className="block text-xs text-zinc-500 mb-0.5">–ì–æ–¥–∏–Ω</label>
                <input
                  type="number"
                  value={inactiveHours}
                  onChange={(e) => setInactiveHours(parseInt(e.target.value))}
                  className="w-16 py-2 px-3 rounded-md bg-zinc-700 text-white border border-zinc-600 focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                />
              </div>
              <div>
                <label className="block text-xs text-zinc-500 mb-0.5">–•–≤–∏–ª–∏–Ω</label>
                <input
                  type="number"
                  value={inactiveMinutes}
                  onChange={(e) => setInactiveMinutes(parseInt(e.target.value))}
                  className="w-16 py-2 px-3 rounded-md bg-zinc-700 text-white border border-zinc-600 focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                />
              </div>
            </div>
          </div>
        )}

        {unlockType === "vote" && (
          <div className="mb-4">
            <label className="block text-sm text-zinc-400 mb-1">–ì–∞–º–∞–Ω—Ü—ñ –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è (–∫–æ–∂–Ω–∏–π –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞)</label>
            <textarea
              value={voters}
              onChange={(e) => setVoters(e.target.value)}
              className="w-full py-2 px-3 rounded-md bg-zinc-700 text-white border border-zinc-600 focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
              rows={3}
            />
          </div>
        )}

        <Button onClick={handleSubmit} disabled={loading || !file || !encryptionKey} className="w-full bg-blue-600 hover:bg-blue-700">
          {loading ? "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..." : "üîê –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–µ–π—Ñ"}
        </Button>

        {cid && (
          <div className="mt-6 bg-zinc-900 border border-zinc-700 p-4 rounded-lg text-sm text-blue-300">
            <p className="mb-1">‚úÖ –°–µ–π—Ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ!</p>
            <p className="break-all">
              <strong>CID:</strong> {cid}
            </p>
            <p className="text-xs text-zinc-500 mt-2">
              –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–±–µ—Ä–µ–≥—Ç–∏ —Å–≤—ñ–π –∫–ª—é—á —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è. –ë–µ–∑ –Ω—å–æ–≥–æ –≤–∏ –Ω–µ –∑–º–æ–∂–µ—Ç–µ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –¥–∞–Ω–∏—Ö.
            </p>
          </div>
        )}
      </div>
    </div>
  );
}